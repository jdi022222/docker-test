name: Deploy Main to Ubuntu Server with Gradle and Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Repository Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('/.gradle', '/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create application-prod.yml by secrets
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
        shell: bash

      # gradlew에 실행 권한을 부여
      - name: Grant Execute Permisson for Gradlew
        run: chmod +x gradlew

      # test는 CI 과정에서 수행되므로 여기서는 `-x`로 테스트를 생략
      # `--stacktrace`로 더 자세한 로그가 출력
      - name: Build with Gradle (without Test)
        run: ./gradlew clean build -x test --stacktrace

      # docker hub에 로그인
      # -u -p를 통한 로그인 시 요청이 보안오류가 발생할 수 있음
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # dockerfile을 이용해 이미지를 빌드 후 push
      # 로그인하지 않으면 push 시에 요청이 거부될 수 있음
      - name: Docker Hub build & push
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}  -f ./.docker/Dockerfile --push .


      # deploy.sh 파일 서버로 전달하기
      - name: Send deploy.sh to Prod Ubuntu Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./script/deploy.sh"
          target: "/home/jdi0222/"


      # 도커 컴포즈 설정 파일 서버로 전달하기
      - name: Send docker-compose.yml to Prod Ubuntu Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          source: "./.docker/docker-compose.yml"
          target: "/home/jdi0222/"

      # Ubuntu에 접속하고 배포
      # 도커 컴포즈 실행하기
      # 도커 허브에서 jar파일 및 pull후에 컴포즈 up
      - name: Deploy to Prod Ubuntu Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            sudo cp /home/jdi0222/.docker/docker-compose.yml /home/jdi0222
            sudo cp /home/jdi0222/script/deploy.sh /home/jdi0222
            cd /home/jdi0222
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            chmod 777 ./deploy.sh
            ./deploy.sh
            docker image prune -f
